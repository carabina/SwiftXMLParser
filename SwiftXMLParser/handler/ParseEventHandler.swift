

import Foundation

/**
 * Ultra simple event handler for events generated by an event driven parser
 */
public protocol ParseEventHandler {
    /**
     *
     * @param name
     * @param attr_names
     * @param attr_values
     */
    func onStartElement(name:String,attr_names:[String?]!, attr_values:[String]!)
    
    /**
     *
     * @param cdata
     */
    func onElementCData(cdata:String)
    
    /**
     *
     * @param name
     * @return
     */
    func onEndElement(name:String) ->Bool
    
    /**
     *
     * @param errorMessage
     */
    func onError(errorMessage:String)
    
    /**
     *
     * @param other
     */
    func onOtherXML(other:String)
    
    /**
     *
     * @param state
     */
    func saveParserState(state:ParserState)
    
    /**
     *
     * @return
     */
    func getParserState() -> ParserState!
    
    
    /**
     *
     * @return
     */
    func getParsedElement() -> Element!
    
    
    /**
     * Returns true if {@code ParseEventHandler} has parsed elements otherwise
     * false
     */
    func hasParsedElement()-> Bool
    
    func onElementText(text:String)
    
    
    
}


/**
 * Callback interface to enable event based processing in XML Parsing
 * process.
 */
protocol ParseEventCallback {
    /**
     * Get invoked when { ParseEventHandler} has finished parsing an
     * element. Once the method is invoked, Parsed element is removed from
     * the queue.
     * call delegate.xmlParserHandler.getParsedElement() to get element created by handler
     *
     * @param e newly parsed element
     * @return true if the parser should quit processing otherwise false
     */
    func onParsedElement( e:Element)->Bool
}
